grammar;

use super::ast::*;

extern {
    type Location = usize;
    type Error = String;

    enum Token {
        "const" => Token::Const,
        "int" => Token::Int,
        "void" => Token::Void,
        "if" => Token::If,
        "else" => Token::Else,
        "while" => Token::While,
        "break" => Token::Break,
        "continue" => Token::Continue,
        "return" => Token::Return,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
        ";" => Token::Semi,
        "," => Token::Comma,
        "=" => Token::Assign,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "!" => Token::Not,
        "*" => Token::Mul,
        "/" => Token::Div,
        "%" => Token::Mod,
        "<" => Token::Lt,
        ">" => Token::Gt,
        "<=" => Token::Le,
        ">=" => Token::Ge,
        "==" => Token::Eq,
        "!=" => Token::Neq,
        "&&" => Token::And,
        "||" => Token::Or,
        "IDENT" => Token::Ident(String),
        "INT_CONST" => Token::IntConst(i32),
    }
}

pub CompUnit: CompUnit = {
    <decl: Decl> => CompUnit::Decl(Box::new(decl)),
    <func_def: FuncDef> => CompUnit::FuncDef(Box::new(func_def)),
};

// 其他规则...