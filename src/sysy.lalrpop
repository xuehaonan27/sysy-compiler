grammar;

use crate::ast::*;
use crate::token::{Token, LexicalError};

extern {
    type Location = usize;
    type Error = String;

    enum Token {
        IDENT => Token::Ident,
        INT_CONST => Token::IntConst,

        "const" => Token::Const,
        "if" => Token::If,
        "else" => Token::Else,
        "while" => Token::While,
        "break" => Token::Break,
        "continue" => Token::Continue,
        "return" => Token::Return,

        "+" => Token::Plus,
        "-" => Token::Minus,
        "!" => Token::Not,
        "*" => Token::Mul,
        "/" => Token::Div,
        "%" => Token::Mod,
        "^" => Token::Pow,

        "&" => Token::BitAnd,
        "~" => Token::BitNot,
        "|" => Token::BitOr,
        "<<" => Token::ShiftL,
        ">>" => Token::ShiftR,
        
        "&&" => Token::And,
        "||" => Token::Or,

        "<" => Token::Lt,
        ">" => Token::Gt,
        "<=" => Token::Le,
        ">=" => Token::Ge,
        "==" => Token::Eq,
        "!=" => Token::Neq,

        "=" => Token::Assign,
        
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
        
        "," => Token::Comma,
        ";" => Token::SemiColon,
        ":" => Token::Colon,
        "::" => Token::DoubleColon,
        "." => Token::Dot,
        ".." => Token::Concat,
        "..." => Token::Dots,

        "int" => Token::Int,
        "void" => Token::Void,   
    }
}

CommaList<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};